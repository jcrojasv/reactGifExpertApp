{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","idx","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,OCPdG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACtC,OACE,sBAAKC,UAAU,6CAAf,UACC,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAKA,Q,uBCJGK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UAAUF,GAD3C,+DAEHG,MAAMR,GAFH,cAEfS,EAFe,gBAGEA,EAAIC,OAHN,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATjB,kBAYdY,GAZc,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAEvB,ECH0B,SAACA,GAC3B,MAA0BrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WACTjB,EAAQC,GACLiB,MAAK,SAAAP,GACJK,EAAS,CACPT,KAAMI,EACNG,SAAS,SAGd,CAACb,IAGGc,EDd2BI,CAAalB,GAAvCa,EAAR,EAAQA,QAAeH,EAAvB,EAAiBJ,KAEjB,OACE,qCACE,6BAAMN,IACJa,GACA,mBAAGjB,UAAU,oCAAb,yBAIF,qBAAKA,UAAU,YAAf,SAEMc,EAAOF,KAAK,SAAAC,GAAG,OACb,wBAAC,EAAD,2BACMA,GADN,IAEEU,IAAKV,EAAIhB,eEjBZ2B,EAAe,WAC1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEIS,EAAWqB,KAAK,SAACR,EAAUqB,GAAX,OACd,cAAC,EAAD,CAEErB,SAAYA,GAFd,mBACmBqB,a,MCV/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df2ef87f.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories,])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export const GifGridItem = ({id, title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeInDown\">\n     <img src={url} alt={title} />\n     <p>{ title }</p>\n    </div>\n  )\n}\n","export const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=KCaxSWwmRqxY49TpchzaGQDhF6xzNCcY`\n  const res = await fetch(url)\n  const { data } = await res.json()\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs\n}","// import { useState, useEffect } from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\n\nexport const GifGrid = ({category}) => {\n\n  const { loading, data: images } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{ category }</h3>\n      { loading &&\n        <p className=\"animate__animated animated__flash\">\n          Cargando...\n        </p>\n      }\n      <div className=\"card-grid\">\n          {\n            images.map( img =>\n              <GifGridItem\n                {...img}\n                key={img.id}\n              />\n            )\n          }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect( () => {\n    getGifs(category)\n      .then(images => {\n        setState({\n          data: images,\n          loading: false\n        })\n      })\n  }, [category])\n\n\n  return state\n}","import React, { useState } from \"react\"\nimport { AddCategory } from '../components/AddCategory'\nimport { GifGrid } from '../components/GifGrid'\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <ol>\n        {\n          categories.map( (category, idx) =>\n            <GifGrid\n              key={`category-${idx}`}\n              category= { category }\n            />\n          )\n        }\n      </ol>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}